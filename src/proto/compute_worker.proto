// Copyright 2022 HDL
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";
package AGE.ProtoBuf.ComputeWorker;

import "base.proto";

option cc_generic_services = true;

message SendMsgRequest {
    required AGE.ProtoBuf.Msg msg = 1;
}

message SendMsgResponse {
    required bool success = 1;
}

message SendQueryRequest {
    required string query = 1;
    required uint32 client_port = 2;
    optional uint32 timeout = 3 [default = 0];
    optional bool is_throughput_test = 4 [default = false];
    optional int32 query_template_idx = 5 [default = -1];
}

message SendQueryResponse {
    required bool success = 1;
    optional uint32 qid = 2;
}

message SendMultiQueryReq {  // only used for thpt test
    repeated string queries = 1;
    optional uint32 timeout = 2 [default = 0];
}
message SendMultiQueryResp {
    required bool success = 1; 
}

message SyncIndexReq {
    required uint32 label = 1;
    required uint32 prop = 2;
    required bool isCreate = 3;
}
message SyncIndexResp {
    required bool success = 1;
}

message CheckThptReq {
    required uint32 num_queries = 1;
}
message CheckThptResp {
    required uint32 num_finished_queries = 1;
    required bool finish = 2;
}

message GetThptMetricsReq {
    required string ofname = 1;
    required uint32 num_sent_queries = 2;
    required uint64 max_lat = 3;  // sec
    optional uint64 duration = 4 [default = 0];
    optional bool with_model_state = 5 [default = true];
    optional bool with_idxed_lat = 6 [default = false];
    optional bool with_idxed_width = 7 [default = false];
    optional bool is_stream = 8 [default = false];
}
message GetThptMetricsResp {
    required bool success = 1;
    required uint64 num_queries = 2;
    required uint64 duration = 3;  // ns
    required bytes metrics = 4;

    message idxed_lat {
        required uint32 qt_idx = 1;
        required double p50 = 2;
        required double p99 = 3;
        optional double qos = 4 [default = 0];
        optional double p99_width = 5 [default = 0];
    }

    repeated idxed_lat lats = 5;
    optional bytes model_state = 6;
}

message GetInterDataReq {}
message GetInterDataResp {
    required bool success = 1;
    repeated bytes data = 2;
}

message GetRLStateReq {}
message GetRLStateResp {
    required bool success = 1;
    optional bytes state = 2;
}

message ApplyRLActionReq {
    required bytes action = 1;
}
message ApplyRLActionResp {
    required bool success = 1;
}

service Service {
    rpc SendMsg(SendMsgRequest) returns (SendMsgResponse);
    rpc SendQuery(SendQueryRequest) returns (SendQueryResponse);
    rpc SyncIndex(SyncIndexReq) returns (SyncIndexResp);
    rpc SendMultiQuery(SendMultiQueryReq) returns (SendMultiQueryResp);
    rpc GetThptMetrics(GetThptMetricsReq) returns (GetThptMetricsResp);
    rpc ClearThptMonitor(AGE.ProtoBuf.AnnounceReq) returns (AGE.ProtoBuf.AnnounceResp);
    rpc CheckThpt(CheckThptReq) returns (CheckThptResp);
    rpc ThptStart(AGE.ProtoBuf.AnnounceReq) returns (AGE.ProtoBuf.AnnounceResp);
    rpc ThptSendEnd(AGE.ProtoBuf.AnnounceReq) returns (AGE.ProtoBuf.AnnounceResp);
    rpc GetRLState(GetRLStateReq) returns (GetRLStateResp);
    rpc ApplyRLAction(ApplyRLActionReq) returns (ApplyRLActionResp);
    rpc GetInterData(GetInterDataReq) returns (GetInterDataResp);
}
