[Config]
#total running time (sec)
testTime= 10
#number of input queries, should be larger than inputQPS * testTime
numQueries= 30000
#random query number generate by each worker
randomSeedPerWorker= 30000
#qps per client
inputQPS= 3000
#number of parallel clients for async thpt tester
kClient= 1
#the period of waiting for the thpt to be ended (sec)
waitPeriod= 50
#workload idx, used to distinguish different set of queries
workloadIdx= 0

[Query Template]
# Query Template | RAND_OBJ_LABEL | RAND_OBJ_PROP | QUERY RATIO (x / 100)% | TIMEOUT (ms) | [OPTIONAL] DIRECTION | [OPTIONAL] EDGE
# AC1
MATCH (p:product {id:$RAND})-[:also_view*1..3]-(product:product) WHERE product.main_cat = "Books" RETURN DISTINCT product.id, product.brand, product.title, product.price ORDER BY product.price ASC, product.id ASC LIMIT 20|product|id|15|1000|both|also_view
# AC2
MATCH (:product {id:$RAND})-[:also_view*1..2]-(p:product)-[:has_review]->(review:review) WHERE review.review_time < 1300000000 RETURN p.id, p.title, p.brand, review.id, review.rating, review.review_time ORDER BY review.review_time DESC, review.id ASC LIMIT 20|product|id|118|1000|both|also_view
# AC3
MATCH (n:product {id:$RAND})-[:also_buy*1..2]-(m:product) WITH DISTINCT m MATCH (m)-[:has_review]->(r:review) WHERE (r.review_time > 1000000000 AND r.review_time < 1400000000) AND (r.rating = 4.0 OR r.rating = 5.0) RETURN m.id, m.title, m.brand, r.asin ORDER BY m.id ASC LIMIT 20|product|id|24|1000|both|also_buy
# AC5
MATCH (u:user {id:$RAND})<-[:has_creator]-(r:review)-[:has_review]-(p:product)-[:also_buy*1..2]-(m:product) WHERE r.rating > 3.0 RETURN m.id, m.title, m.brand ORDER BY r.rating DESC, m.id ASC LIMIT 20|user|id|28|1000|in|has_creator
# AC6
MATCH (:product {id:$RAND})-[:also_view*1..3]-(product:product) WITH DISTINCT product MATCH (product)-[:has_review]->(goodreview:review) WHERE goodreview.rating >= 4.0 WITH DISTINCT product MATCH (product)-[:has_review]->(badreview:review) WHERE badreview.rating <= 2.0 RETURN product.brand, count(DISTINCT badreview) ORDER BY product.brand LIMIT 20|product|id|52|1000|both|also_view
# AC7
MATCH (u:user {id:$RAND})<-[:has_creator]-(r:review)<-[:has_review]-(p:product)-[:also_view*1..2]-(rec:product) WHERE r.rating > 3.0 AND (p)-[:also_buy]->(rec) RETURN p.title AS ProductID, rec.id AS RecommendationID, rec.brand AS RecommendationBrand ORDER BY p.id ASC, rec.id ASC LIMIT 20|user|id|61|1000|in|has_creator
# AC8
MATCH (u:user {id:$RAND})<-[:has_creator]-(r:review)<-[:has_review]-(p:product)-[:has_review]->(r2:review)-[:has_creator]->(u2:user) RETURN u2.user_id as user_id, p.title as product_title, p.brand as product_brand ORDER BY u2.id ASC LIMIT 20|user|id|53|1000|in|has_creator
# AS1
MATCH (r:review {id:$RAND})<-[:has_review]-(p:product) RETURN r.rating as rating, r.review_time as rtime, r.asin as productName, p.id as productId|review|id|1857|1000|in|has_review
# AS2
MATCH (p:product {id:$RAND})-[:also_view]-(:product)-[:has_review]->(r:review)-[:has_creator]->(u:user) RETURN r.id as rid, r.rating as rating, r.review_time as rtime, u.id as uid|product|id|2000|1000|both|also_view
# AS3
MATCH (n:product {id:$RAND})-[:also_buy]-(m:product) RETURN m.id as productId, m.title as productTitle, m.brand as productBrand ORDER BY m.id ASC|product|id|2000|1000|both|also_buy
# AS4
MATCH (r:review {id:$RAND}) RETURN r.review_time as review_time, r.rating as rating|review|id|2000|1000
# AS5
MATCH (r:review {id:$RAND})<-[:has_review]-(p:product) RETURN p.id as productId, p.title as productTitle, p.brand as productBrand|review|id|2000|1000|in|has_review