### gflags
find_path(GFLAGS_INCLUDE_DIR gflags/gflags.h)
find_library(GFLAGS_LIB NAMES gflags libgflags)
if(GFLAGS_INCLUDE_DIR AND GFLAGS_LIB)
    message(STATUS "Found gflags:")
    message(STATUS "  (Headers)       ${GFLAGS_INCLUDE_DIR}")
    message(STATUS "  (Library)       ${GFLAGS_LIB}")
    list(APPEND THIRD_PARTY_INCLUDES ${GFLAGS_INCLUDE_DIR})
    list(APPEND THIRD_PARTY_LIBS ${GFLAGS_LIB})
else()
    message(FATAL_ERROR "gflags not found")
endif()


### glog
find_path(GLOG_INCLUDE_DIR NAMES glog/logging.h)
find_library(GLOG_LIB NAMES glog)
if(GLOG_INCLUDE_DIR AND GLOG_LIB)
    message(STATUS "Found glog:")
    message(STATUS "  (Headers)       ${GLOG_INCLUDE_DIR}")
    message(STATUS "  (Library)       ${GLOG_LIB}")
    list(APPEND THIRD_PARTY_INCLUDES ${GLOG_INCLUDE_DIR})
    list(APPEND THIRD_PARTY_LIBS ${GLOG_LIB})
else()
    message(FATAL_ERROR "glog not found")
endif()

### OpenSSL
find_path(OPENSSL_INCLUDE_DIR NAMES openssl/ssl.h)
find_library(OPENSSL_LIB NAMES ssl)
if(OPENSSL_INCLUDE_DIR AND OPENSSL_LIB)
    message(STATUS "Found openssl:")
    message(STATUS "  (Headers)       ${OPENSSL_INCLUDE_DIR}")
    message(STATUS "  (Library)       ${OPENSSL_LIB}")
    list(APPEND THIRD_PARTY_INCLUDES ${OPENSSL_INCLUDE_DIR})
    list(APPEND THIRD_PARTY_LIBS ${OPENSSL_LIB})
else()
    message(FATAL_ERROR "openssl not found")
endif()

### protobuf
include(FindProtobuf)
list(APPEND THIRD_PARTY_LIBS ${PROTOBUF_LIBRARIES})
list(APPEND THIRD_PARTY_INCLUDES ${PROTOBUF_INCLUDE_DIRS})
set(PROTOBUF_PROTOC $<TARGET_FILE:protobuf::protoc>)
if(Protobuf_INCLUDE_DIRS AND Protobuf_LIBRARIES AND Protobuf_PROTOC_LIBRARIES)
    message(STATUS "Found protobuf:")
    message(STATUS "  (Headers)       ${Protobuf_INCLUDE_DIRS}")
    message(STATUS "  (Library)       ${Protobuf_LIBRARIES}")
    message(STATUS "  (Protoc)        ${Protobuf_PROTOC_EXECUTABLE}")
else()
    message(FATAL_ERROR "protobuf not found")
endif()

### boost
set(Boost_USE_STATIC_LIBS OFF)
set(Boost_USE_MULTITHREADED ON)
find_package(Boost REQUIRED COMPONENTS coroutine context)
if (BOOST_FOUND)
    list(APPEND THIRD_PARTY_INCLUDES ${Boost_INCLUDE_DIRS})
    list(APPEND THIRD_PARTY_LIBS ${Boost_LIBRARIES})
    message(STATUS "Found boost:")
    message(STATUS "  (Headers)       ${Boost_INCLUDE_DIRS}")
    message(STATUS "  (Library)       ${Boost_LIBRARIES}")
else()
    message(FATAL_ERROR "boost not found")
endif()

#zmq
find_package(PkgConfig)
pkg_check_modules(PC_ZeroMQ QUIET zmq)
find_path(ZMQ_INCLUDE_DIRS NAMES zmq.h PATHS ${PC_ZeroMQ_INCLUDE_DIRS})
find_library(ZMQ_LIBRARIES NAMES zmq PATHS ${PC_ZeroMQ_LIBRARY_DIRS})
if((NOT ZMQ_INCLUDE_DIRS) OR (NOT ZMQ_LIBRARIES))
    message(STATUS "ZMQ not found")
else()
    list(APPEND THIRD_PARTY_INCLUDES ${ZMQ_INCLUDE_DIRS})
    list(APPEND THIRD_PARTY_LIBS ${ZMQ_LIBRARIES})
    message(STATUS "Found libzmq")
    message(STATUS "  (Headers)       ${ZMQ_INCLUDE_DIRS}")
    message(STATUS "  (Library)       ${ZMQ_LIBRARIES}")
endif()

include_directories(${THIRD_PARTY_INCLUDES})
